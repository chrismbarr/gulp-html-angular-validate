require('mocha');

var expect = require('chai').expect;
var File = require('gulp-util').File;
var assert = require('stream-assert');
var fs = require('fs');
var gulp = require('gulp');
var validate = require('../');
var path = require('path');
var print = require('gulp-print');

describe('gulp-html-angular-validate', function() {

  // it('should emit error for empty files', function(done) {
  //   var stream = validate();

  //   var emptyFile = {
  //     'isNull': function() { return true; }
  //   };

  //   stream.on('error', function(err) {
  //     expect(err.message).to.exist;
  //     done();
  //   });

  //   stream.write(emptyFile);
  // });

  // it('should emit error for streams', function(done) {
  //   var stream = validate();

  //   var fileStream = {
  //     'isNull': function() { return false; },
  //     'isStream': function() { return true; }
  //   };

  //   stream.on('error', function(err) {
  //     expect(err.message).to.exist;
  //     done();
  //   });

  //   stream.write(fileStream);
  // });

  it('should ignore empty files', function(done) {
    var stream = validate();
    stream
      .pipe(assert.length(0))
      .pipe(assert.end(done));
    stream.write(new File());
    stream.end();
  });

  it('should emit error on streamed files', function(done) {
    gulp.src('./test/html/*', {buffer: false})
      .pipe(validate())
      .on('error', function(err) {
        expect(err.message).to.exist;
        done();
      });
  });

  it('should find validation failures', function(done) {
    gulp.src('./test/html/invalid.html')
      .pipe(validate())
      .on('error', function(err) {
        expect(err).to.have.length.above(0);
        done();
      });
  });

  it('should not find validation failures', function(done) {
    gulp.src('./test/html/valid.html')
      .pipe(validate())
      .on('data', function(data) {
        done(new Error('wrong'));
      })
      .on('error', function(err) {
        done();
      });
  });


  // describe('concat()', function() {
  //   it('should throw, when arguments is missing', function () {
  //     (function() {
  //       concat();
  //     }).should.throw('Missing file option for gulp-concat');
  //   });

  //   it('should concat one file', function (done) {
  //     test('wadap')
  //       .pipe(concat('test.js'))
  //       .pipe(assert.length(1))
  //       .pipe(assert.first(function (d) { d.contents.toString().should.eql('wadap'); }))
  //       .pipe(assert.end(done));
  //   });

  //   it('should concat multiple files', function (done) {
  //     test('wadap', 'doe')
  //       .pipe(concat('test.js'))
  //       .pipe(assert.length(1))
  //       .pipe(assert.first(function (d) { d.contents.toString().should.eql('wadap\ndoe'); }))
  //       .pipe(assert.end(done));
  //   });

  //   it('should concat buffers', function (done) {
  //     test([65, 66], [67, 68], [69, 70])
  //       .pipe(concat('test.js'))
  //       .pipe(assert.length(1))
  //       .pipe(assert.first(function (d) { d.contents.toString().should.eql('AB\nCD\nEF'); }))
  //       .pipe(assert.end(done));
  //   });

  //   it('should preserve mode from files', function (done) {
  //     test('wadaup')
  //       .pipe(concat('test.js'))
  //       .pipe(assert.length(1))
  //       .pipe(assert.first(function (d) { d.stat.mode.should.eql(0666); }))
  //       .pipe(assert.end(done));
  //   });

  //   it('should take path from latest file', function (done) {
  //     gulp.src([fixtures('*'), thirdPath])
  //       .pipe(concat('test.js'))
  //       .pipe(assert.length(1))
  //       .pipe(assert.first(function (newFile) {
  //         var newFilePath = path.resolve(newFile.path);
  //         var expectedFilePath = path.resolve(path.join(thirdBase, 'test.js'));
  //         newFilePath.should.equal(expectedFilePath);
  //       }))
  //       .pipe(assert.end(done));
  //   });

  //   it('should preserve relative path from files', function (done) {
  //     test('wadap', 'doe')
  //       .pipe(concat('test.js'))
  //       .pipe(assert.length(1))
  //       .pipe(assert.first(function (d) { d.relative.should.eql('test.js'); }))
  //       .pipe(assert.end(done));
  //   });

  //   describe('should not fail if no files were input', function () {
  //     it('when argument is a string', function(done) {
  //       var stream = concat('test.js');
  //       stream.end();
  //       done();
  //     });

  //     it('when argument is an object', function(done) {
  //       var stream = concat({path: 'new.txt'});
  //       stream.end();
  //       done();
  //     });
  //   });

  //   describe('with object as argument', function () {
  //     it('should throw without path', function () {
  //       (function() {
  //         concat({ path: undefined });
  //       }).should.throw('Missing path in file options for gulp-concat');
  //     });

  //     it('should create file based on path property', function (done) {
  //       test('wadap')
  //         .pipe(concat({path: 'new.txt'}))
  //         .pipe(assert.length(1))
  //         .pipe(assert.first(function (d) { d.path.should.eql('new.txt'); }))
  //         .pipe(assert.end(done));
  //     });

  //     it('should calculate relative path from cwd and path in arguments', function (done) {
  //       test('wadap')
  //         .pipe(concat({cwd: '/home/contra', path: '/home/contra/test/new.txt'}))
  //         .pipe(assert.length(1))
  //         .pipe(assert.first(function (d) { d.relative.should.eql('test/new.txt'); }))
  //         .pipe(assert.end(done));
  //     });
  //   });
  // });
});

